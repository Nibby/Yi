buildscript {
    dependencies {
        apply from: 'https://raw.githubusercontent.com/i-net-software/SetupBuilder/master/scripts/SetupBuilderVersion.gradle'
        classpath 'gradle.plugin.de.inetsoftware:SetupBuilder:4.8.7'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id "de.inetsoftware.appbundler" version "4.8.7"
}

buildDir = '../build/' + getProject().getName()
project.ext.mainModuleName = "yi.editor"

if (hasProperty("buildVersion")) {
    version = project['buildVersion']
} else {
    version = "9999.0"
}

ext.isSnapshotBuild = true
if (project.hasProperty("snapshotBuild") && project['snapshotBuild'] == 'false') {
    ext.isSnapshotBuild = false
}

// Tasks related to app distribution
apply from: "release.gradle"

dependencies {
    compile project(":yi.core")
    compile project(":components:yi.component.boardviewer")
    compile project(":components:yi.component.treeviewer")
    compile project(":components:yi.component.commentviewer")

    // JavaFx dependencies
    implementation rootProject.ext.javaFxDependencies.implementation

    testImplementation rootProject.ext.commonDependencies.testImplementation
    testRuntimeOnly rootProject.ext.commonDependencies.testRuntimeOnly
    // Integration test dependencies are beneath where testUi task is defined.
}

javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.media', 'javafx.web']
}

idea {
    module {
        testSourceDirs += file("$projectDir/src/testUi")
    }
}

sourceSets {
    main {
        java {
            srcDir('src/main/java')
        }

        resources {
            srcDir('src/main/resources')
        }
    }

    test {
        java {
            srcDirs = ['src/test']
        }
    }

    testUi {
        java {
            srcDirs = ['src/testUi']
        }
    }
}

def workingDirectory = rootProject.projectDir.absoluteFile.toPath().resolve("temp").toString()

def jvmArgsFromSource = [
        "-Dyi.fromSource=true",
        "-Duser.dir=$workingDirectory",
        "-ea",
]

application {
    mainModule = project.ext.mainModuleName
    mainClassName = 'yi.editor.EditorMain'

    applicationDefaultJvmArgs = [
        "--add-exports", "javafx.graphics/com.sun.glass.ui=${project.ext.mainModuleName}".toString()
    ]
    // This should be part of IntelliJ's run configuration.
    // When running from Gradle, should also add '-Dyi.fromSource=true' to the run task
    if (System.getProperty("yi.fromSource") == "true") {
        applicationDefaultJvmArgs += jvmArgsFromSource
    }
}

compileJava {
    options.compilerArgs += [ "--add-exports", "javafx.graphics/com.sun.glass.ui=yi.editor" ]
}

configurations {
    testUiImplementation.extendsFrom testImplementation
    testUiRuntimeOnly.extendsFrom testRuntimeOnly
}

test {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output
}

task testUi(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.testUi.output.classesDirs
    classpath = sourceSets.testUi.runtimeClasspath
}

dependencies {
    testUiCompile sourceSets.main.output
    testUiImplementation rootProject.ext.javaFxDependencies.testUiImplementation
}