import yi.buildsrc.release.TargetPlatform
import yi.buildsrc.release.YiReleasePlugin

import java.nio.file.Paths

apply plugin: YiReleasePlugin
apply plugin: 'de.inetsoftware.setupbuilder'

def thisProject = rootProject.project(":yi.editor")
def applicationName = rootProject.name // TODO: Should just define a name for the editor project
def applicationIcon = thisProject.projectDir.toPath().resolve("packaging").resolve("macOS").resolve("AppIcon.icns")
        .toAbsolutePath().toString()

def jreDir = YiReleasePlugin.getCustomJreImageDirectoryAsPath(thisProject).toAbsolutePath().toString()
def artifactsDir = YiReleasePlugin.getReleaseArtifactsDirectoryAsPath(thisProject).toAbsolutePath().toString()
def versionString = thisProject.version

if (TargetPlatform.getCurrentPlatform() == TargetPlatform.Windows) {
    versionString = versionString.replace("-SNAPSHOT", "") // MSI installer doesn't support this suffix
}

jlinkOptions.jdkHome = null // If null, uses JAVA_HOME env value instead
jlinkOptions.bundledJdkVersion = 11
jlinkOptions.mainModuleName = thisProject.ext.mainModuleName
jlinkOptions.mainJarArtifactName = "${thisProject.name}-${thisProject.version}.jar".toString()
jlinkOptions.outputDir = jreDir

def executableVMArguments = [
        "--module-path", getPlatformTargetModulePath(),
        "--add-exports", "javafx.graphics/com.sun.glass.ui=${jlinkOptions.mainModuleName}".toString(),

        // This clause must appear after all --add-exports
        "--module", "yi.editor/yi.editor.EditorMain",
]

if (TargetPlatform.getCurrentPlatform() == TargetPlatform.macOS) {
    def macOsJrePath = Paths.get(jreDir).resolve("Contents").resolve("Home")
    jreDir = macOsJrePath.toAbsolutePath().toString()
    jlinkOptions.outputDir = jreDir

}

setupBuilder {
    vendor = 'Sizhe (Kevin) Yang'
    application = applicationName
    description = "Go game record editor"
    appIdentifier = "codes.nibby.yi"
    version = versionString
//    licenseFile = Paths.get(rootProject.projectDir.toString()).resolve('LICENSE').toFile()
    icons = [ applicationIcon ]
    // all files for all platforms
    from(artifactsDir) {
        include '*.jar'
    }
    mainJar = jlinkOptions.mainJarArtifactName
    mainClass = "yi.editor.EditorMain"
    destinationDir = "artifacts"

    // Bundle a custom JRE image tailored for this application.
    // See buildSrc/YiReleasePlugin for details.
    bundleJre = jlinkOptions.outputDir
    failOnEmptyFrom = "true"

    desktopStarter {
        displayName = applicationName
        description = "Go game record editor"
        mimeTypes = "text/html;text"
        categories = "software;game"

        javaVMArguments = executableVMArguments

        documentType {
            fileExtension = [ "sgf" ]
            name = "Smart Game File"
            mimetype = "application/sgf"
            role = "Editor"
        }
    }
}

private static String getPlatformTargetModulePath() {
    def os = System.getProperty("os.name").toLowerCase()
    if (os.contains("win")) {
        return "." // Doesn't really matter
    } else if (os.contains("mac")) {
        return "\$APP_ROOT/Contents/Java/"
    } else {
        // Assuming it's linux
        return "/usr/share/yi/"
    }
}

// These tasks are provided by YiReleasePlugin which expands the artifacts produced by
// 'assembleDist' to the project 'release' directory. This should contain all the jars
// used by the editor application.
def prerequisites = [prepareArtifactsForPackaging, createJreImage]

dmg.dependsOn(prerequisites)
deb.dependsOn(prerequisites)
msi.dependsOn(prerequisites)
rpm.dependsOn(prerequisites)


msi {
    arch = "x64"
    minOS = 6.1
    multiInstanceCount = 1
    installScope = "perMachine"
    runAfterIsOptional = true

    launch4j {
        executable = "Yi.exe"
        javaVMArguments = executableVMArguments
    }
}

dmg {
    windowWidth = 500
    windowHeight = 400
    iconSize = 128
}

deb {
    installationRoot = "/usr/share/yi"
    section = "Games"
    maintainerEmail = "nibby@null.net"
    description = "Go game editor program"
}